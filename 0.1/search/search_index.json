{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"1_basic_sql/","title":"Basic SQL","text":""},{"location":"1_basic_sql/#overview","title":"Overview","text":"<p>Basic SQL Lesson Overview In this lesson, we will cover and you will be able to:</p> <ul> <li>Describe why SQL is important</li> <li>Explain how SQL data is stored and structured</li> <li>Create SQL queries using proper syntax including</li> </ul> <pre><code>SELECT &amp; FROM\nLIMIT\nORDER BY\nWHERE\nBasic arithmetic operations\nLIKE\nIN\nNOT\nAND &amp; BETWEEN &amp; OR\n</code></pre>"},{"location":"1_basic_sql/#entity-relationship-diagram","title":"Entity Relationship Diagram","text":"<p>An entity-relationship diagram (ERD) is a common way to view data in a database. Below is the ERD for the database we will use from Parch &amp; Posey. These diagrams help you visualize the data you are analyzing including:</p> <p>The names of the tables. The columns in each table. The way the tables work together.</p> <p></p> <p>The \"crow's foot\" that connects the tables together shows us how the columns in one table relate to the columns in another table</p>"},{"location":"1_basic_sql/#why-is-sql-important","title":"Why is SQL important","text":"<p>Advantages of using SQL:</p> <ol> <li>SQL is easy to understand</li> <li>Traditional databases allow us to access data directly</li> <li>Traditional databases allow us to audit and replicate our data</li> <li>SQL is great tool for analysing multiple tables at once</li> <li>SQL allows you to analyse more complex questions than dashboards tools like Google Analytics</li> </ol>"},{"location":"1_basic_sql/#advantages-of-sql","title":"Advantages of SQL","text":"<ol> <li>Data integrity is ensured - only data you want to be entered is entered, only authourised users will enter data.</li> <li>Data can be accessed quickly - SQL allows you to obtain results very quickly from the DB. Code can be optimized to pull results quickly.</li> <li>Data is easily shared - multiple users can access data stored in a DB, the data is the same for all users allowing for consistent results for anyone with access to you database.</li> </ol>"},{"location":"1_basic_sql/#sql-vs-no-sql","title":"SQL vs No SQL","text":"<p>These NoSQL environments tend to be particularly popular for web-based data, but less popular for data that lives in spreadsheets the way we have been analyzing data up to this point.</p>"},{"location":"1_basic_sql/#types-of-sql-databases","title":"Types of SQL databases","text":"<ol> <li>MySQL</li> <li>Access</li> <li>Oracle</li> <li>Microsoft SQL Server</li> <li>Postgres</li> </ol> <p>comparison of SQL lite, MYSQL, and PostgreSQL</p>"},{"location":"1_basic_sql/#formatting-sql-queries","title":"Formatting SQL queries","text":"<p>Use Upper and Lower cases in SQL</p> <p>SQL is case insensitive</p> <pre><code>SELECT account_id\nFROM orders\n</code></pre> <p>same as</p> <pre><code>select account_id\nfrom orders\n</code></pre>"},{"location":"1_basic_sql/#best-practices","title":"Best practices","text":"<ol> <li>Capitalize all SQL commands, like SELECT and FROM, and keep everything else in your query lower case</li> <li>Avoid spaces in Table and Variable Names<ul> <li>e.g. Table Name =&gt; table_name</li> </ul> </li> <li>Use white spaces <pre><code>/*good example */\nSELECT account_id FROM orders\n</code></pre> <pre><code>/*bad example */\nSELECT              account_id\n\nFROM               orders\n</code></pre></li> <li>Semicolons depending on your sql environment you may need a semi colon <pre><code>/*with semi colon*/\nSELECT account_id\nFROM orders;\n</code></pre> <pre><code>/*without semi colon*/\nSELECT account_id\nFROM orders\n</code></pre></li> </ol>"},{"location":"1_basic_sql/#limit","title":"LIMIT","text":"<p>The LIMIT statement is useful when you want to see just the first few rows of a table. This can be much faster for loading than if we load the entire dataset.</p> <p>Always used as the last part of query.</p> <pre><code>SELECT *\nFROM orders\nLIMIT 10;\n</code></pre>"},{"location":"1_basic_sql/#order-by","title":"ORDER BY","text":"<p>The ORDER BY statement allows us to sort our results using the data in any column</p> <p>Using ORDER BY in a SQL query only has temporary effects, for the results of that query</p> <p>The ORDER BY statement always comes in a query after the <code>SELECT</code> and <code>FROM</code> statements, but before the <code>LIMIT</code> statement</p> <p>Pro Tip: to order descending use <code>DESC</code> in the  <code>ORDER BY</code> clause </p> <pre><code>SELECT *\nFROM orders\nORDER BY occurred_at\nLIMIT 1000;\n</code></pre> <p>You can <code>ORDER BY</code> more than one column by using a <code>,</code> <pre><code>SELECT *\nFROM orders\nORDER BY occurred_at, total_amt_usd DESC\nLIMIT 1000;\n</code></pre></p>"},{"location":"1_basic_sql/#where","title":"WHERE","text":"<p>Using the WHERE statement, we can display subsets of tables based on conditions that must be met. You can also think of the WHERE command as filtering the data.</p> <p>Common symbols used in WHERE statements include:</p> <ul> <li><code>&gt;</code> (greater than)</li> <li><code>&lt;</code> (less than)</li> <li><code>&gt;=</code> (greater than or equal to)</li> <li><code>&lt;=</code> (less than or equal to)</li> <li><code>=</code> (equal to)</li> <li><code>`!=</code> (not equal to)</li> </ul> <pre><code>SELECT *\nFROM orders\nWHERE account_id = 4251\nORDER BY occurred_at\nLIMIT 1000;\n</code></pre>"}]}